plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'
compileJava.options.encoding = 'UTF-8'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }


}

repositories {
    mavenCentral()
}

dependencies {
    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //hateoas
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'



    //h2
    runtimeOnly 'com.h2database:h2'
    //client
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    //embedded-redis
//    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
    // test-containers
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

//spring docs
ext {
    snippetsDir = file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}


test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

tasks.named('test') {
    useJUnitPlatform()
}

